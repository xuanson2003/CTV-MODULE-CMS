// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OcdServiceMono.API.Infrastructure.DbContexts;

#nullable disable

namespace OcdServiceMono.API.Migrations
{
    [DbContext(typeof(ReadDomainDbContext))]
    [Migration("20240716100741_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.CMS.CMS_Cer_Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Content")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.HasKey("Id")
                        .HasName("pk_cms_cer_content");

                    b.ToTable("CMS_Cer_Content");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.CMS.CMS_Group_News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Descible")
                        .HasColumnType("text")
                        .HasColumnName("descible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_cms_group_news");

                    b.ToTable("CMS_Group_News");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.CMS.CMS_Group_Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GroupId");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("PostId");

                    b.HasKey("Id")
                        .HasName("pk_cms_group_posts");

                    b.ToTable("CMS_Group_Posts");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.CMS.CMS_Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar")
                        .HasComment("Đường dẫn ảnh đại diện");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content")
                        .HasComment("Nội dung");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Desc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("desc")
                        .HasComment("Mô tả ngắn");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Tình trạng của bài viết (true: Hoạt động, false: Không hoạt động)");

                    b.Property<bool>("IsHot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hot")
                        .HasComment("Là tin nổi bật");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source")
                        .HasComment("Nguồn của bài viết");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status")
                        .HasComment("Trạng thái của tin bài (da_duyet: Đã duyệt, chua_duyet: Chưa duyệt, ...)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasComment("Tiêu đề");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.Property<int>("View")
                        .HasColumnType("integer")
                        .HasColumnName("view")
                        .HasComment("Lượt xem");

                    b.HasKey("Id")
                        .HasName("pk_cms_post");

                    b.ToTable("CMS_Post");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Accounts", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("CitizenCard")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("citizen_card");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("create_by");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId ");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pass_word");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId ");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_sm_accounts");

                    b.ToTable("SM_Accounts");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("department_name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.HasKey("Id")
                        .HasName("pk_sm_department");

                    b.ToTable("SM_Department");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_File", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ContentId ");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("create_by");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Extention")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("extention");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("file_name");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("PostId ");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_sm_file");

                    b.ToTable("SM_File");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("SM_MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("sm_menu_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_sm_menu");

                    b.HasIndex("SM_MenuId")
                        .HasDatabaseName("ix_sm_menu_sm_menu_id");

                    b.ToTable("SM_Menu");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Descible")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.HasKey("Id")
                        .HasName("pk_sm_permission");

                    b.ToTable("SM_Permission");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("created_by")
                        .HasComment("Tài khoản khởi tạo");

                    b.Property<DateTimeOffset?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time")
                        .HasComment("Ngày khởi tạo");

                    b.Property<DateTimeOffset?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_at")
                        .HasComment("Ngày xóa lần cuối");

                    b.Property<string>("Descible")
                        .HasColumnType("text")
                        .HasColumnName("descible");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("updated_by")
                        .HasComment("Tài khoản cập nhập lần cuối");

                    b.Property<DateTimeOffset?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time")
                        .HasComment("Ngày cập nhập lần cuối");

                    b.HasKey("Id")
                        .HasName("pk_sm_role");

                    b.ToTable("SM_Role");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.CMS.CMS_Group_Posts", b =>
                {
                    b.HasOne("OcdServiceMono.API.Models.Entities.CMS.CMS_Group_News", "CMS_Group_News")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cms_group_posts_cms_group_news_id");

                    b.HasOne("OcdServiceMono.API.Models.Entities.CMS.CMS_Posts", "CMS_Post")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cms_group_posts_cms_post_id");

                    b.Navigation("CMS_Group_News");

                    b.Navigation("CMS_Post");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Accounts", b =>
                {
                    b.HasOne("OcdServiceMono.API.Models.Entities.SM.SM_Department", "SM_Department")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sm_accounts_sm_department_id");

                    b.HasOne("OcdServiceMono.API.Models.Entities.SM.SM_Role", "SM_Role")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sm_accounts_sm_role_id");

                    b.Navigation("SM_Department");

                    b.Navigation("SM_Role");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_File", b =>
                {
                    b.HasOne("OcdServiceMono.API.Models.Entities.CMS.CMS_Cer_Content", "CMS_Cer_Content")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sm_file_cms_cer_content_id");

                    b.HasOne("OcdServiceMono.API.Models.Entities.CMS.CMS_Posts", "CMS_Post")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sm_file_cms_post_id");

                    b.Navigation("CMS_Cer_Content");

                    b.Navigation("CMS_Post");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Menu", b =>
                {
                    b.HasOne("OcdServiceMono.API.Models.Entities.SM.SM_Menu", null)
                        .WithMany("ChildMenus")
                        .HasForeignKey("SM_MenuId")
                        .HasConstraintName("fk_sm_menu_sm_menu_sm_menu_id");
                });

            modelBuilder.Entity("OcdServiceMono.API.Models.Entities.SM.SM_Menu", b =>
                {
                    b.Navigation("ChildMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
